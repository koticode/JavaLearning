package JavaLearningStart.OOP.ClassComposition;
/**
 * Композиция классов позволяет сочетать функционал классов между собой, оперировать данными других классов.
 * Композиция классов очень широко используется в Java, поэтому решил разобрать ее на примере компьютера.
 * Оперативная память и жесткий диск являются частью компьютера, компьютер не может функционировать без них.
 * Т.е. класс Computer зависит от классав Ram и Ssd, и обращается к данным полей этих классов.
 * Ниже показано:
 * 1) создание оперативной памяти и жесткого диска
 * 2) создание компьютера с оперативной памятью и жестким диском (созданы в шаге 1)
 * 3) апргрейд компьютера- замена оперативки и жесткого диска
 * 4) добавление оперативки к установленной ранее в шаге 3
 *
 * ВВЕДЕНЫ ОГРАНИЧЕНИЯ на ввод данных с помощью Setter.
 * Оперативная память может быть 4,6,8,12,16,32 Гб
 * Объем жесткого диска ограничен значениями -128,256,512,1024,2048,4096,8192 Гб
 * При неверно введенных данных выполнение программы прекращается через System.exit() со статусом 1.
 */

public class CompositionRunner {

    public static void main(String[] args) {
        Ram ram = new Ram(4); // создаем объект "оперативная память" и задаем в конструкторе ее значение
        Ssd ssd = new Ssd(512); // создаем объект "жесткий диск" и задаем в конструкторе объем его памяти
        Computer computer = new Computer(ram, ssd); // создаем объект computer класса Computer. Объект будет создан с заданными выше значениями ram и ssd, которые принадлежать к другим классам.
        computer.printState(); // выводим параметры объекта computer
/**
 * Апгрейд компьютера можно будет сделать 2-мя способами.
 * 1) Заменить оперативку и жесткий диск:
 */
        Ram ram2=new Ram(8); // Сходили и купили новую оперативку взамен старой
        Ssd ssd2=new Ssd(1024); // Сходили и купили новый жесткий диск взамен старого
        computer.setRam(ram2);
        computer.setSsd(ssd2);
        System.out.println("Характеристики компьютера после замены оперативки и жесткого диска: ");
        computer.printState();
/**
 * 2) Добавить модуль оперативной памяти к существующему:
 */
        Ram ram3=new Ram(8); // Купили дополнительную оперативку, чтобы добавить к купленной ранее. Прогресс не стоит на месте:)
        computer.setRam(new Ram(ram2.addRam(ram3))); // для оперативки в классе Ram создал метод, позволяющий добавить модуль оперативной памяти
        System.out.println("Характеристики компьютера после добавления оперативки к существующей: ");
        computer.printState();
    }
}
